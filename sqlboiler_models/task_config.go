// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package galaxy_db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TaskConfig is an object representing the database table.
type TaskConfig struct {
	ID        uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Headers   null.JSON   `boil:"headers" json:"headers,omitempty" toml:"headers" yaml:"headers,omitempty"`
	Content   null.JSON   `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	Active    uint8       `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreatedAt uint64      `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	UpdatedAt uint64      `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *taskConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taskConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaskConfigColumns = struct {
	ID        string
	Headers   string
	Content   string
	Active    string
	CreatedAt string
	CreatedBy string
	UpdatedAt string
	UpdatedBy string
}{
	ID:        "id",
	Headers:   "headers",
	Content:   "content",
	Active:    "active",
	CreatedAt: "created_at",
	CreatedBy: "created_by",
	UpdatedAt: "updated_at",
	UpdatedBy: "updated_by",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TaskConfigWhere = struct {
	ID        whereHelperuint64
	Headers   whereHelpernull_JSON
	Content   whereHelpernull_JSON
	Active    whereHelperuint8
	CreatedAt whereHelperuint64
	CreatedBy whereHelpernull_String
	UpdatedAt whereHelperuint64
	UpdatedBy whereHelpernull_String
}{
	ID:        whereHelperuint64{field: "`task_config`.`id`"},
	Headers:   whereHelpernull_JSON{field: "`task_config`.`headers`"},
	Content:   whereHelpernull_JSON{field: "`task_config`.`content`"},
	Active:    whereHelperuint8{field: "`task_config`.`active`"},
	CreatedAt: whereHelperuint64{field: "`task_config`.`created_at`"},
	CreatedBy: whereHelpernull_String{field: "`task_config`.`created_by`"},
	UpdatedAt: whereHelperuint64{field: "`task_config`.`updated_at`"},
	UpdatedBy: whereHelpernull_String{field: "`task_config`.`updated_by`"},
}

// TaskConfigRels is where relationship names are stored.
var TaskConfigRels = struct {
}{}

// taskConfigR is where relationships are stored.
type taskConfigR struct {
}

// NewStruct creates a new relationship struct
func (*taskConfigR) NewStruct() *taskConfigR {
	return &taskConfigR{}
}

// taskConfigL is where Load methods for each relationship are stored.
type taskConfigL struct{}

var (
	taskConfigAllColumns            = []string{"id", "headers", "content", "active", "created_at", "created_by", "updated_at", "updated_by"}
	taskConfigColumnsWithoutDefault = []string{"headers", "content", "created_at", "created_by", "updated_at", "updated_by"}
	taskConfigColumnsWithDefault    = []string{"id", "active"}
	taskConfigPrimaryKeyColumns     = []string{"id"}
)

type (
	// TaskConfigSlice is an alias for a slice of pointers to TaskConfig.
	// This should generally be used opposed to []TaskConfig.
	TaskConfigSlice []*TaskConfig
	// TaskConfigHook is the signature for custom TaskConfig hook methods
	TaskConfigHook func(boil.Executor, *TaskConfig) error

	taskConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taskConfigType                 = reflect.TypeOf(&TaskConfig{})
	taskConfigMapping              = queries.MakeStructMapping(taskConfigType)
	taskConfigPrimaryKeyMapping, _ = queries.BindMapping(taskConfigType, taskConfigMapping, taskConfigPrimaryKeyColumns)
	taskConfigInsertCacheMut       sync.RWMutex
	taskConfigInsertCache          = make(map[string]insertCache)
	taskConfigUpdateCacheMut       sync.RWMutex
	taskConfigUpdateCache          = make(map[string]updateCache)
	taskConfigUpsertCacheMut       sync.RWMutex
	taskConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taskConfigBeforeInsertHooks []TaskConfigHook
var taskConfigBeforeUpdateHooks []TaskConfigHook
var taskConfigBeforeDeleteHooks []TaskConfigHook
var taskConfigBeforeUpsertHooks []TaskConfigHook

var taskConfigAfterInsertHooks []TaskConfigHook
var taskConfigAfterSelectHooks []TaskConfigHook
var taskConfigAfterUpdateHooks []TaskConfigHook
var taskConfigAfterDeleteHooks []TaskConfigHook
var taskConfigAfterUpsertHooks []TaskConfigHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TaskConfig) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TaskConfig) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TaskConfig) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TaskConfig) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TaskConfig) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TaskConfig) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TaskConfig) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TaskConfig) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TaskConfig) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taskConfigAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaskConfigHook registers your hook function for all future operations.
func AddTaskConfigHook(hookPoint boil.HookPoint, taskConfigHook TaskConfigHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		taskConfigBeforeInsertHooks = append(taskConfigBeforeInsertHooks, taskConfigHook)
	case boil.BeforeUpdateHook:
		taskConfigBeforeUpdateHooks = append(taskConfigBeforeUpdateHooks, taskConfigHook)
	case boil.BeforeDeleteHook:
		taskConfigBeforeDeleteHooks = append(taskConfigBeforeDeleteHooks, taskConfigHook)
	case boil.BeforeUpsertHook:
		taskConfigBeforeUpsertHooks = append(taskConfigBeforeUpsertHooks, taskConfigHook)
	case boil.AfterInsertHook:
		taskConfigAfterInsertHooks = append(taskConfigAfterInsertHooks, taskConfigHook)
	case boil.AfterSelectHook:
		taskConfigAfterSelectHooks = append(taskConfigAfterSelectHooks, taskConfigHook)
	case boil.AfterUpdateHook:
		taskConfigAfterUpdateHooks = append(taskConfigAfterUpdateHooks, taskConfigHook)
	case boil.AfterDeleteHook:
		taskConfigAfterDeleteHooks = append(taskConfigAfterDeleteHooks, taskConfigHook)
	case boil.AfterUpsertHook:
		taskConfigAfterUpsertHooks = append(taskConfigAfterUpsertHooks, taskConfigHook)
	}
}

// OneP returns a single taskConfig record from the query, and panics on error.
func (q taskConfigQuery) OneP(exec boil.Executor) *TaskConfig {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single taskConfig record from the query.
func (q taskConfigQuery) One(exec boil.Executor) (*TaskConfig, error) {
	o := &TaskConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "galaxy_db: failed to execute a one query for task_config")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all TaskConfig records from the query, and panics on error.
func (q taskConfigQuery) AllP(exec boil.Executor) TaskConfigSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TaskConfig records from the query.
func (q taskConfigQuery) All(exec boil.Executor) (TaskConfigSlice, error) {
	var o []*TaskConfig

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "galaxy_db: failed to assign all query results to TaskConfig slice")
	}

	if len(taskConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all TaskConfig records in the query, and panics on error.
func (q taskConfigQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TaskConfig records in the query.
func (q taskConfigQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to count task_config rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q taskConfigQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q taskConfigQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "galaxy_db: failed to check if task_config exists")
	}

	return count > 0, nil
}

// TaskConfigs retrieves all the records using an executor.
func TaskConfigs(mods ...qm.QueryMod) taskConfigQuery {
	mods = append(mods, qm.From("`task_config`"))
	return taskConfigQuery{NewQuery(mods...)}
}

// FindTaskConfigP retrieves a single record by ID with an executor, and panics on error.
func FindTaskConfigP(exec boil.Executor, iD uint64, selectCols ...string) *TaskConfig {
	retobj, err := FindTaskConfig(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTaskConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaskConfig(exec boil.Executor, iD uint64, selectCols ...string) (*TaskConfig, error) {
	taskConfigObj := &TaskConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `task_config` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, taskConfigObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "galaxy_db: unable to select from task_config")
	}

	return taskConfigObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TaskConfig) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaskConfig) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("galaxy_db: no task_config provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taskConfigInsertCacheMut.RLock()
	cache, cached := taskConfigInsertCache[key]
	taskConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taskConfigAllColumns,
			taskConfigColumnsWithDefault,
			taskConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taskConfigType, taskConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taskConfigType, taskConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `task_config` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `task_config` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `task_config` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, taskConfigPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to insert into task_config")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == taskConfigMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to populate default values for task_config")
	}

CacheNoHooks:
	if !cached {
		taskConfigInsertCacheMut.Lock()
		taskConfigInsertCache[key] = cache
		taskConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateP uses an executor to update the TaskConfig, and panics on error.
// See Update for more documentation.
func (o *TaskConfig) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the TaskConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaskConfig) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taskConfigUpdateCacheMut.RLock()
	cache, cached := taskConfigUpdateCache[key]
	taskConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taskConfigAllColumns,
			taskConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("galaxy_db: unable to update task_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `task_config` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, taskConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taskConfigType, taskConfigMapping, append(wl, taskConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to update task_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to get rows affected by update for task_config")
	}

	if !cached {
		taskConfigUpdateCacheMut.Lock()
		taskConfigUpdateCache[key] = cache
		taskConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q taskConfigQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q taskConfigQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to update all for task_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to retrieve rows affected for task_config")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TaskConfigSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaskConfigSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("galaxy_db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `task_config` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to update all in taskConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to retrieve rows affected all in update all taskConfig")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TaskConfig) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLTaskConfigUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaskConfig) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("galaxy_db: no task_config provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskConfigColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTaskConfigUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taskConfigUpsertCacheMut.RLock()
	cache, cached := taskConfigUpsertCache[key]
	taskConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taskConfigAllColumns,
			taskConfigColumnsWithDefault,
			taskConfigColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			taskConfigAllColumns,
			taskConfigPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("galaxy_db: unable to upsert task_config, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "task_config", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `task_config` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(taskConfigType, taskConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taskConfigType, taskConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to upsert for task_config")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == taskConfigMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(taskConfigType, taskConfigMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to retrieve unique values for task_config")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to populate default values for task_config")
	}

CacheNoHooks:
	if !cached {
		taskConfigUpsertCacheMut.Lock()
		taskConfigUpsertCache[key] = cache
		taskConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single TaskConfig record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TaskConfig) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single TaskConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaskConfig) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("galaxy_db: no TaskConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taskConfigPrimaryKeyMapping)
	sql := "DELETE FROM `task_config` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to delete from task_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to get rows affected by delete for task_config")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q taskConfigQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q taskConfigQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("galaxy_db: no taskConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to delete all from task_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to get rows affected by deleteall for task_config")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TaskConfigSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaskConfigSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taskConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `task_config` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to delete all from taskConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to get rows affected by deleteall for task_config")
	}

	if len(taskConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TaskConfig) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaskConfig) Reload(exec boil.Executor) error {
	ret, err := FindTaskConfig(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TaskConfigSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskConfigSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaskConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `task_config`.* FROM `task_config` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to reload all in TaskConfigSlice")
	}

	*o = slice

	return nil
}

// TaskConfigExistsP checks if the TaskConfig row exists. Panics on error.
func TaskConfigExistsP(exec boil.Executor, iD uint64) bool {
	e, err := TaskConfigExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TaskConfigExists checks if the TaskConfig row exists.
func TaskConfigExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `task_config` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "galaxy_db: unable to check if task_config exists")
	}

	return exists, nil
}
