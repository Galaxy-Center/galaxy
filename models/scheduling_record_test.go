// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package galaxy_db

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSchedulingRecords(t *testing.T) {
	t.Parallel()

	query := SchedulingRecords()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSchedulingRecordsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchedulingRecordsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SchedulingRecords().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchedulingRecordsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SchedulingRecordSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchedulingRecordsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SchedulingRecordExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SchedulingRecord exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SchedulingRecordExists to return true, but got false.")
	}
}

func testSchedulingRecordsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	schedulingRecordFound, err := FindSchedulingRecord(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if schedulingRecordFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSchedulingRecordsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SchedulingRecords().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testSchedulingRecordsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SchedulingRecords().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSchedulingRecordsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedulingRecordOne := &SchedulingRecord{}
	schedulingRecordTwo := &SchedulingRecord{}
	if err = randomize.Struct(seed, schedulingRecordOne, schedulingRecordDBTypes, false, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}
	if err = randomize.Struct(seed, schedulingRecordTwo, schedulingRecordDBTypes, false, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = schedulingRecordOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = schedulingRecordTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SchedulingRecords().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSchedulingRecordsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schedulingRecordOne := &SchedulingRecord{}
	schedulingRecordTwo := &SchedulingRecord{}
	if err = randomize.Struct(seed, schedulingRecordOne, schedulingRecordDBTypes, false, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}
	if err = randomize.Struct(seed, schedulingRecordTwo, schedulingRecordDBTypes, false, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = schedulingRecordOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = schedulingRecordTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func schedulingRecordBeforeInsertHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func schedulingRecordAfterInsertHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func schedulingRecordAfterSelectHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func schedulingRecordBeforeUpdateHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func schedulingRecordAfterUpdateHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func schedulingRecordBeforeDeleteHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func schedulingRecordAfterDeleteHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func schedulingRecordBeforeUpsertHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func schedulingRecordAfterUpsertHook(e boil.Executor, o *SchedulingRecord) error {
	*o = SchedulingRecord{}
	return nil
}

func testSchedulingRecordsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SchedulingRecord{}
	o := &SchedulingRecord{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord object: %s", err)
	}

	AddSchedulingRecordHook(boil.BeforeInsertHook, schedulingRecordBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	schedulingRecordBeforeInsertHooks = []SchedulingRecordHook{}

	AddSchedulingRecordHook(boil.AfterInsertHook, schedulingRecordAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	schedulingRecordAfterInsertHooks = []SchedulingRecordHook{}

	AddSchedulingRecordHook(boil.AfterSelectHook, schedulingRecordAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	schedulingRecordAfterSelectHooks = []SchedulingRecordHook{}

	AddSchedulingRecordHook(boil.BeforeUpdateHook, schedulingRecordBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	schedulingRecordBeforeUpdateHooks = []SchedulingRecordHook{}

	AddSchedulingRecordHook(boil.AfterUpdateHook, schedulingRecordAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	schedulingRecordAfterUpdateHooks = []SchedulingRecordHook{}

	AddSchedulingRecordHook(boil.BeforeDeleteHook, schedulingRecordBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	schedulingRecordBeforeDeleteHooks = []SchedulingRecordHook{}

	AddSchedulingRecordHook(boil.AfterDeleteHook, schedulingRecordAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	schedulingRecordAfterDeleteHooks = []SchedulingRecordHook{}

	AddSchedulingRecordHook(boil.BeforeUpsertHook, schedulingRecordBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	schedulingRecordBeforeUpsertHooks = []SchedulingRecordHook{}

	AddSchedulingRecordHook(boil.AfterUpsertHook, schedulingRecordAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	schedulingRecordAfterUpsertHooks = []SchedulingRecordHook{}
}

func testSchedulingRecordsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSchedulingRecordsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(schedulingRecordColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSchedulingRecordsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSchedulingRecordsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SchedulingRecordSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSchedulingRecordsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SchedulingRecords().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	schedulingRecordDBTypes = map[string]string{`ID`: `bigint`, `TaskID`: `bigint`, `Status`: `varchar`, `Message`: `text`, `Active`: `tinyint`, `CreatedAt`: `bigint`, `CreatedBy`: `varchar`, `UpdatedAt`: `bigint`, `UpdatedBy`: `varchar`}
	_                       = bytes.MinRead
)

func testSchedulingRecordsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(schedulingRecordPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(schedulingRecordAllColumns) == len(schedulingRecordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSchedulingRecordsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(schedulingRecordAllColumns) == len(schedulingRecordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SchedulingRecord{}
	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, schedulingRecordDBTypes, true, schedulingRecordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(schedulingRecordAllColumns, schedulingRecordPrimaryKeyColumns) {
		fields = schedulingRecordAllColumns
	} else {
		fields = strmangle.SetComplement(
			schedulingRecordAllColumns,
			schedulingRecordPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SchedulingRecordSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSchedulingRecordsUpsert(t *testing.T) {
	t.Parallel()

	if len(schedulingRecordAllColumns) == len(schedulingRecordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSchedulingRecordUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SchedulingRecord{}
	if err = randomize.Struct(seed, &o, schedulingRecordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SchedulingRecord: %s", err)
	}

	count, err := SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, schedulingRecordDBTypes, false, schedulingRecordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SchedulingRecord struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SchedulingRecord: %s", err)
	}

	count, err = SchedulingRecords().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
