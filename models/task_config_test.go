// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package galaxy_db

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTaskConfigs(t *testing.T) {
	t.Parallel()

	query := TaskConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTaskConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TaskConfigs().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaskConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TaskConfigExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TaskConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TaskConfigExists to return true, but got false.")
	}
}

func testTaskConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	taskConfigFound, err := FindTaskConfig(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if taskConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTaskConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TaskConfigs().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTaskConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TaskConfigs().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTaskConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taskConfigOne := &TaskConfig{}
	taskConfigTwo := &TaskConfig{}
	if err = randomize.Struct(seed, taskConfigOne, taskConfigDBTypes, false, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, taskConfigTwo, taskConfigDBTypes, false, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = taskConfigOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taskConfigTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaskConfigs().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTaskConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	taskConfigOne := &TaskConfig{}
	taskConfigTwo := &TaskConfig{}
	if err = randomize.Struct(seed, taskConfigOne, taskConfigDBTypes, false, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, taskConfigTwo, taskConfigDBTypes, false, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = taskConfigOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taskConfigTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func taskConfigBeforeInsertHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func taskConfigAfterInsertHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func taskConfigAfterSelectHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func taskConfigBeforeUpdateHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func taskConfigAfterUpdateHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func taskConfigBeforeDeleteHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func taskConfigAfterDeleteHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func taskConfigBeforeUpsertHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func taskConfigAfterUpsertHook(e boil.Executor, o *TaskConfig) error {
	*o = TaskConfig{}
	return nil
}

func testTaskConfigsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TaskConfig{}
	o := &TaskConfig{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, taskConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TaskConfig object: %s", err)
	}

	AddTaskConfigHook(boil.BeforeInsertHook, taskConfigBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	taskConfigBeforeInsertHooks = []TaskConfigHook{}

	AddTaskConfigHook(boil.AfterInsertHook, taskConfigAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	taskConfigAfterInsertHooks = []TaskConfigHook{}

	AddTaskConfigHook(boil.AfterSelectHook, taskConfigAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	taskConfigAfterSelectHooks = []TaskConfigHook{}

	AddTaskConfigHook(boil.BeforeUpdateHook, taskConfigBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	taskConfigBeforeUpdateHooks = []TaskConfigHook{}

	AddTaskConfigHook(boil.AfterUpdateHook, taskConfigAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	taskConfigAfterUpdateHooks = []TaskConfigHook{}

	AddTaskConfigHook(boil.BeforeDeleteHook, taskConfigBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	taskConfigBeforeDeleteHooks = []TaskConfigHook{}

	AddTaskConfigHook(boil.AfterDeleteHook, taskConfigAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	taskConfigAfterDeleteHooks = []TaskConfigHook{}

	AddTaskConfigHook(boil.BeforeUpsertHook, taskConfigBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	taskConfigBeforeUpsertHooks = []TaskConfigHook{}

	AddTaskConfigHook(boil.AfterUpsertHook, taskConfigAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	taskConfigAfterUpsertHooks = []TaskConfigHook{}
}

func testTaskConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(taskConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTaskConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaskConfigSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTaskConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaskConfigs().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	taskConfigDBTypes = map[string]string{`ID`: `bigint`, `Headers`: `json`, `Content`: `json`, `Active`: `tinyint`, `CreatedAt`: `bigint`, `CreatedBy`: `varchar`, `UpdatedAt`: `bigint`, `UpdatedBy`: `varchar`}
	_                 = bytes.MinRead
)

func testTaskConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(taskConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(taskConfigAllColumns) == len(taskConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTaskConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(taskConfigAllColumns) == len(taskConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaskConfig{}
	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taskConfigDBTypes, true, taskConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(taskConfigAllColumns, taskConfigPrimaryKeyColumns) {
		fields = taskConfigAllColumns
	} else {
		fields = strmangle.SetComplement(
			taskConfigAllColumns,
			taskConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TaskConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTaskConfigsUpsert(t *testing.T) {
	t.Parallel()

	if len(taskConfigAllColumns) == len(taskConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTaskConfigUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TaskConfig{}
	if err = randomize.Struct(seed, &o, taskConfigDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaskConfig: %s", err)
	}

	count, err := TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, taskConfigDBTypes, false, taskConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskConfig struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaskConfig: %s", err)
	}

	count, err = TaskConfigs().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
