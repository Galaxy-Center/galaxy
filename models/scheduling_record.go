// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package galaxy_db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SchedulingRecord is an object representing the database table.
type SchedulingRecord struct {
	ID        uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TaskID    int64       `boil:"task_id" json:"task_id" toml:"task_id" yaml:"task_id"`
	Status    string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Message   null.String `boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`
	Active    uint8       `boil:"active" json:"active" toml:"active" yaml:"active"`
	CreatedAt uint64      `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	UpdatedAt uint64      `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *schedulingRecordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L schedulingRecordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SchedulingRecordColumns = struct {
	ID        string
	TaskID    string
	Status    string
	Message   string
	Active    string
	CreatedAt string
	CreatedBy string
	UpdatedAt string
	UpdatedBy string
}{
	ID:        "id",
	TaskID:    "task_id",
	Status:    "status",
	Message:   "message",
	Active:    "active",
	CreatedAt: "created_at",
	CreatedBy: "created_by",
	UpdatedAt: "updated_at",
	UpdatedBy: "updated_by",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperuint8 struct{ field string }

func (w whereHelperuint8) EQ(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint8) NEQ(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint8) LT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint8) LTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint8) GT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint8) GTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint8) IN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var SchedulingRecordWhere = struct {
	ID        whereHelperuint64
	TaskID    whereHelperint64
	Status    whereHelperstring
	Message   whereHelpernull_String
	Active    whereHelperuint8
	CreatedAt whereHelperuint64
	CreatedBy whereHelpernull_String
	UpdatedAt whereHelperuint64
	UpdatedBy whereHelpernull_String
}{
	ID:        whereHelperuint64{field: "`scheduling_record`.`id`"},
	TaskID:    whereHelperint64{field: "`scheduling_record`.`task_id`"},
	Status:    whereHelperstring{field: "`scheduling_record`.`status`"},
	Message:   whereHelpernull_String{field: "`scheduling_record`.`message`"},
	Active:    whereHelperuint8{field: "`scheduling_record`.`active`"},
	CreatedAt: whereHelperuint64{field: "`scheduling_record`.`created_at`"},
	CreatedBy: whereHelpernull_String{field: "`scheduling_record`.`created_by`"},
	UpdatedAt: whereHelperuint64{field: "`scheduling_record`.`updated_at`"},
	UpdatedBy: whereHelpernull_String{field: "`scheduling_record`.`updated_by`"},
}

// SchedulingRecordRels is where relationship names are stored.
var SchedulingRecordRels = struct {
}{}

// schedulingRecordR is where relationships are stored.
type schedulingRecordR struct {
}

// NewStruct creates a new relationship struct
func (*schedulingRecordR) NewStruct() *schedulingRecordR {
	return &schedulingRecordR{}
}

// schedulingRecordL is where Load methods for each relationship are stored.
type schedulingRecordL struct{}

var (
	schedulingRecordAllColumns            = []string{"id", "task_id", "status", "message", "active", "created_at", "created_by", "updated_at", "updated_by"}
	schedulingRecordColumnsWithoutDefault = []string{"task_id", "status", "message", "created_at", "created_by", "updated_at", "updated_by"}
	schedulingRecordColumnsWithDefault    = []string{"id", "active"}
	schedulingRecordPrimaryKeyColumns     = []string{"id"}
)

type (
	// SchedulingRecordSlice is an alias for a slice of pointers to SchedulingRecord.
	// This should generally be used opposed to []SchedulingRecord.
	SchedulingRecordSlice []*SchedulingRecord
	// SchedulingRecordHook is the signature for custom SchedulingRecord hook methods
	SchedulingRecordHook func(boil.Executor, *SchedulingRecord) error

	schedulingRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	schedulingRecordType                 = reflect.TypeOf(&SchedulingRecord{})
	schedulingRecordMapping              = queries.MakeStructMapping(schedulingRecordType)
	schedulingRecordPrimaryKeyMapping, _ = queries.BindMapping(schedulingRecordType, schedulingRecordMapping, schedulingRecordPrimaryKeyColumns)
	schedulingRecordInsertCacheMut       sync.RWMutex
	schedulingRecordInsertCache          = make(map[string]insertCache)
	schedulingRecordUpdateCacheMut       sync.RWMutex
	schedulingRecordUpdateCache          = make(map[string]updateCache)
	schedulingRecordUpsertCacheMut       sync.RWMutex
	schedulingRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var schedulingRecordBeforeInsertHooks []SchedulingRecordHook
var schedulingRecordBeforeUpdateHooks []SchedulingRecordHook
var schedulingRecordBeforeDeleteHooks []SchedulingRecordHook
var schedulingRecordBeforeUpsertHooks []SchedulingRecordHook

var schedulingRecordAfterInsertHooks []SchedulingRecordHook
var schedulingRecordAfterSelectHooks []SchedulingRecordHook
var schedulingRecordAfterUpdateHooks []SchedulingRecordHook
var schedulingRecordAfterDeleteHooks []SchedulingRecordHook
var schedulingRecordAfterUpsertHooks []SchedulingRecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SchedulingRecord) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SchedulingRecord) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SchedulingRecord) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SchedulingRecord) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SchedulingRecord) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SchedulingRecord) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SchedulingRecord) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SchedulingRecord) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SchedulingRecord) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range schedulingRecordAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSchedulingRecordHook registers your hook function for all future operations.
func AddSchedulingRecordHook(hookPoint boil.HookPoint, schedulingRecordHook SchedulingRecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		schedulingRecordBeforeInsertHooks = append(schedulingRecordBeforeInsertHooks, schedulingRecordHook)
	case boil.BeforeUpdateHook:
		schedulingRecordBeforeUpdateHooks = append(schedulingRecordBeforeUpdateHooks, schedulingRecordHook)
	case boil.BeforeDeleteHook:
		schedulingRecordBeforeDeleteHooks = append(schedulingRecordBeforeDeleteHooks, schedulingRecordHook)
	case boil.BeforeUpsertHook:
		schedulingRecordBeforeUpsertHooks = append(schedulingRecordBeforeUpsertHooks, schedulingRecordHook)
	case boil.AfterInsertHook:
		schedulingRecordAfterInsertHooks = append(schedulingRecordAfterInsertHooks, schedulingRecordHook)
	case boil.AfterSelectHook:
		schedulingRecordAfterSelectHooks = append(schedulingRecordAfterSelectHooks, schedulingRecordHook)
	case boil.AfterUpdateHook:
		schedulingRecordAfterUpdateHooks = append(schedulingRecordAfterUpdateHooks, schedulingRecordHook)
	case boil.AfterDeleteHook:
		schedulingRecordAfterDeleteHooks = append(schedulingRecordAfterDeleteHooks, schedulingRecordHook)
	case boil.AfterUpsertHook:
		schedulingRecordAfterUpsertHooks = append(schedulingRecordAfterUpsertHooks, schedulingRecordHook)
	}
}

// OneP returns a single schedulingRecord record from the query, and panics on error.
func (q schedulingRecordQuery) OneP(exec boil.Executor) *SchedulingRecord {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single schedulingRecord record from the query.
func (q schedulingRecordQuery) One(exec boil.Executor) (*SchedulingRecord, error) {
	o := &SchedulingRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "galaxy_db: failed to execute a one query for scheduling_record")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SchedulingRecord records from the query, and panics on error.
func (q schedulingRecordQuery) AllP(exec boil.Executor) SchedulingRecordSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SchedulingRecord records from the query.
func (q schedulingRecordQuery) All(exec boil.Executor) (SchedulingRecordSlice, error) {
	var o []*SchedulingRecord

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "galaxy_db: failed to assign all query results to SchedulingRecord slice")
	}

	if len(schedulingRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SchedulingRecord records in the query, and panics on error.
func (q schedulingRecordQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SchedulingRecord records in the query.
func (q schedulingRecordQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to count scheduling_record rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q schedulingRecordQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q schedulingRecordQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "galaxy_db: failed to check if scheduling_record exists")
	}

	return count > 0, nil
}

// SchedulingRecords retrieves all the records using an executor.
func SchedulingRecords(mods ...qm.QueryMod) schedulingRecordQuery {
	mods = append(mods, qm.From("`scheduling_record`"))
	return schedulingRecordQuery{NewQuery(mods...)}
}

// FindSchedulingRecordP retrieves a single record by ID with an executor, and panics on error.
func FindSchedulingRecordP(exec boil.Executor, iD uint64, selectCols ...string) *SchedulingRecord {
	retobj, err := FindSchedulingRecord(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSchedulingRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchedulingRecord(exec boil.Executor, iD uint64, selectCols ...string) (*SchedulingRecord, error) {
	schedulingRecordObj := &SchedulingRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `scheduling_record` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, schedulingRecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "galaxy_db: unable to select from scheduling_record")
	}

	return schedulingRecordObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SchedulingRecord) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SchedulingRecord) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("galaxy_db: no scheduling_record provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schedulingRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	schedulingRecordInsertCacheMut.RLock()
	cache, cached := schedulingRecordInsertCache[key]
	schedulingRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			schedulingRecordAllColumns,
			schedulingRecordColumnsWithDefault,
			schedulingRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(schedulingRecordType, schedulingRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(schedulingRecordType, schedulingRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `scheduling_record` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `scheduling_record` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `scheduling_record` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, schedulingRecordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to insert into scheduling_record")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == schedulingRecordMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to populate default values for scheduling_record")
	}

CacheNoHooks:
	if !cached {
		schedulingRecordInsertCacheMut.Lock()
		schedulingRecordInsertCache[key] = cache
		schedulingRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateP uses an executor to update the SchedulingRecord, and panics on error.
// See Update for more documentation.
func (o *SchedulingRecord) UpdateP(exec boil.Executor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the SchedulingRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SchedulingRecord) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	schedulingRecordUpdateCacheMut.RLock()
	cache, cached := schedulingRecordUpdateCache[key]
	schedulingRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			schedulingRecordAllColumns,
			schedulingRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("galaxy_db: unable to update scheduling_record, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `scheduling_record` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, schedulingRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(schedulingRecordType, schedulingRecordMapping, append(wl, schedulingRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to update scheduling_record row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to get rows affected by update for scheduling_record")
	}

	if !cached {
		schedulingRecordUpdateCacheMut.Lock()
		schedulingRecordUpdateCache[key] = cache
		schedulingRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q schedulingRecordQuery) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q schedulingRecordQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to update all for scheduling_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to retrieve rows affected for scheduling_record")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SchedulingRecordSlice) UpdateAllP(exec boil.Executor, cols M) int64 {
	rowsAff, err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SchedulingRecordSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("galaxy_db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulingRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `scheduling_record` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulingRecordPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to update all in schedulingRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to retrieve rows affected all in update all schedulingRecord")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SchedulingRecord) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLSchedulingRecordUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SchedulingRecord) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("galaxy_db: no scheduling_record provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(schedulingRecordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSchedulingRecordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	schedulingRecordUpsertCacheMut.RLock()
	cache, cached := schedulingRecordUpsertCache[key]
	schedulingRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			schedulingRecordAllColumns,
			schedulingRecordColumnsWithDefault,
			schedulingRecordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			schedulingRecordAllColumns,
			schedulingRecordPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("galaxy_db: unable to upsert scheduling_record, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "scheduling_record", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `scheduling_record` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(schedulingRecordType, schedulingRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(schedulingRecordType, schedulingRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to upsert for scheduling_record")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == schedulingRecordMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(schedulingRecordType, schedulingRecordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to retrieve unique values for scheduling_record")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to populate default values for scheduling_record")
	}

CacheNoHooks:
	if !cached {
		schedulingRecordUpsertCacheMut.Lock()
		schedulingRecordUpsertCache[key] = cache
		schedulingRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SchedulingRecord record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SchedulingRecord) DeleteP(exec boil.Executor) int64 {
	rowsAff, err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single SchedulingRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SchedulingRecord) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("galaxy_db: no SchedulingRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schedulingRecordPrimaryKeyMapping)
	sql := "DELETE FROM `scheduling_record` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to delete from scheduling_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to get rows affected by delete for scheduling_record")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q schedulingRecordQuery) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q schedulingRecordQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("galaxy_db: no schedulingRecordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to delete all from scheduling_record")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to get rows affected by deleteall for scheduling_record")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SchedulingRecordSlice) DeleteAllP(exec boil.Executor) int64 {
	rowsAff, err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SchedulingRecordSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(schedulingRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulingRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `scheduling_record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulingRecordPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: unable to delete all from schedulingRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "galaxy_db: failed to get rows affected by deleteall for scheduling_record")
	}

	if len(schedulingRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SchedulingRecord) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SchedulingRecord) Reload(exec boil.Executor) error {
	ret, err := FindSchedulingRecord(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SchedulingRecordSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SchedulingRecordSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SchedulingRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulingRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `scheduling_record`.* FROM `scheduling_record` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulingRecordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "galaxy_db: unable to reload all in SchedulingRecordSlice")
	}

	*o = slice

	return nil
}

// SchedulingRecordExistsP checks if the SchedulingRecord row exists. Panics on error.
func SchedulingRecordExistsP(exec boil.Executor, iD uint64) bool {
	e, err := SchedulingRecordExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SchedulingRecordExists checks if the SchedulingRecord row exists.
func SchedulingRecordExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `scheduling_record` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "galaxy_db: unable to check if scheduling_record exists")
	}

	return exists, nil
}
