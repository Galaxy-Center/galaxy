// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package galaxy_db

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecords)
	t.Run("Tasks", testTasks)
	t.Run("TaskConfigs", testTaskConfigs)
}

func TestDelete(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsDelete)
	t.Run("Tasks", testTasksDelete)
	t.Run("TaskConfigs", testTaskConfigsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsQueryDeleteAll)
	t.Run("Tasks", testTasksQueryDeleteAll)
	t.Run("TaskConfigs", testTaskConfigsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsSliceDeleteAll)
	t.Run("Tasks", testTasksSliceDeleteAll)
	t.Run("TaskConfigs", testTaskConfigsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsExists)
	t.Run("Tasks", testTasksExists)
	t.Run("TaskConfigs", testTaskConfigsExists)
}

func TestFind(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsFind)
	t.Run("Tasks", testTasksFind)
	t.Run("TaskConfigs", testTaskConfigsFind)
}

func TestBind(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsBind)
	t.Run("Tasks", testTasksBind)
	t.Run("TaskConfigs", testTaskConfigsBind)
}

func TestOne(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsOne)
	t.Run("Tasks", testTasksOne)
	t.Run("TaskConfigs", testTaskConfigsOne)
}

func TestAll(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsAll)
	t.Run("Tasks", testTasksAll)
	t.Run("TaskConfigs", testTaskConfigsAll)
}

func TestCount(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsCount)
	t.Run("Tasks", testTasksCount)
	t.Run("TaskConfigs", testTaskConfigsCount)
}

func TestHooks(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsHooks)
	t.Run("Tasks", testTasksHooks)
	t.Run("TaskConfigs", testTaskConfigsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsInsert)
	t.Run("SchedulingRecords", testSchedulingRecordsInsertWhitelist)
	t.Run("Tasks", testTasksInsert)
	t.Run("Tasks", testTasksInsertWhitelist)
	t.Run("TaskConfigs", testTaskConfigsInsert)
	t.Run("TaskConfigs", testTaskConfigsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsReload)
	t.Run("Tasks", testTasksReload)
	t.Run("TaskConfigs", testTaskConfigsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsReloadAll)
	t.Run("Tasks", testTasksReloadAll)
	t.Run("TaskConfigs", testTaskConfigsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsSelect)
	t.Run("Tasks", testTasksSelect)
	t.Run("TaskConfigs", testTaskConfigsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsUpdate)
	t.Run("Tasks", testTasksUpdate)
	t.Run("TaskConfigs", testTaskConfigsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("SchedulingRecords", testSchedulingRecordsSliceUpdateAll)
	t.Run("Tasks", testTasksSliceUpdateAll)
	t.Run("TaskConfigs", testTaskConfigsSliceUpdateAll)
}
